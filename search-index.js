var searchIndex = {};
searchIndex["tokio_core"] = {"doc":"`Future`-powered I/O at the core of Tokio","items":[[0,"io","tokio_core","I/O conveniences when working with primitives in `tokio-core`",null,null],[3,"Copy","tokio_core::io","A future which will copy all data from a reader into a writer.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill\na buffer.",null,null],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream\ninto a vector.",null,null],[3,"ReadHalf","","The readable half of an object returned from `Io::split`.",null,null],[3,"WriteHalf","","The readable half of an object returned from `Io::split`.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to\nanother.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the\nobject itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`,\nreturning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O\nobject `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"name":"vec"}],"output":{"name":"readtoend"}}],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to\nthe stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[11,"poll","","",0,null],[11,"poll","","",1,null],[11,"poll","","",2,null],[11,"poll","","",3,null],[11,"poll_read","","Calls the underlying `poll_read` function on this handling, testing to\nsee if it&#39;s ready to be read from.",4,null],[11,"poll_write","","Calls the underlying `poll_write` function on this handling, testing to\nsee if it&#39;s ready to be written to.",5,null],[11,"read","","",4,null],[11,"write","","",5,null],[11,"flush","","",5,null],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire\nslice.",6,{"inputs":[{"name":"t"}],"output":{"name":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this\n`Window`.",6,null],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this\n`Window`.",6,null],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",6,null],[11,"start","","Returns the starting index of this window into the underlying buffer\n`T`.",6,null],[11,"end","","Returns the end index of this window into the underlying buffer\n`T`.",6,null],[11,"set_start","","Changes the starting index of this window to the index specified.",6,null],[11,"set_end","","Changes the end index of this window to the index specified.",6,null],[11,"as_ref","","",6,null],[11,"as_mut","","",6,null],[11,"poll","","",7,null],[6,"IoFuture","","A convenience typedef around a `Future` whose error component is `io::Error`",null,null],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",null,null],[8,"Io","","A trait for read/write I/O objects",null,null],[11,"poll_read","","Tests to see if this I/O object may be readable.",8,null],[11,"poll_write","","Tests to see if this I/O object may be writable.",8,null],[11,"split","","Helper method for splitting this read/write object into two halves.",8,null],[8,"FramedIo","","A trait for framed reading and writing.",null,null],[16,"In","","Messages written",9,null],[16,"Out","","Messages read",9,null],[10,"poll_read","","Tests to see if this `FramedIo` may be readable.",9,null],[10,"read","","Read a message frame from the `FramedIo`",9,null],[10,"poll_write","","Tests to see if this `FramedIo` may be writable.",9,null],[10,"write","","Write a message frame to the `FramedIo`",9,null],[10,"flush","","Flush pending writes or do any other work not driven by reading /\nwriting.",9,null],[0,"channel","tokio_core","In-memory evented channels.",null,null],[3,"Sender","tokio_core::channel","The transmission half of a channel used for sending messages to a receiver.",null,null],[3,"Receiver","","The receiving half of a channel used for processing messages sent by a\n`Sender`.",null,null],[5,"channel","","Creates a new in-memory channel used for sending data across `Send +\n&#39;static` boundaries, frequently threads.",null,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"send","","Sends a message to the corresponding receiver of this sender.",10,null],[11,"clone","","",10,null],[11,"poll","","",11,null],[0,"net","tokio_core","TCP/UDP bindings for `tokio-core`",null,null],[3,"TcpStream","tokio_core::net","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"TcpStreamNew","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream`\nwhen the stream is connected.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the\nstream of sockets received from a listener.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[11,"as_raw_fd","","",12,null],[11,"as_raw_fd","","",13,null],[11,"bind","","Create a new TCP listener associated with this event loop.",13,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"result"}}],[11,"from_listener","","Create a new TCP listener from the standard library&#39;s TCP listener.",13,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",13,null],[11,"local_addr","","Returns the local address that this listener is bound to.",13,null],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener\naccepts.",13,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",13,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",13,null],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",13,null],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",13,null],[11,"fmt","","",13,null],[11,"poll","","",14,null],[11,"connect","","Create a new TCP stream connected to the specified address.",12,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"tcpstreamnew"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given\n`std::net::TcpStream`, connecting it to the address specified.",12,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"iofuture"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",12,null],[11,"poll_write","","Test whether this socket is writey to be written to or not.",12,null],[11,"local_addr","","Returns the local address that this stream is bound to.",12,null],[11,"peer_addr","","Returns the remote address that this stream is connected to.",12,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",12,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",12,null],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",12,null],[11,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",12,null],[11,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so\nthe amount of milliseconds between them.",12,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",12,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",12,null],[11,"read","","",12,null],[11,"write","","",12,null],[11,"flush","","",12,null],[11,"poll_read","","",12,null],[11,"poll_write","","",12,null],[11,"fmt","","",12,null],[11,"poll","","",15,null],[11,"as_raw_fd","","",16,null],[11,"bind","","Create a new UDP socket bound to the specified address.",16,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"result"}}],[11,"from_socket","","Creates a new `UdpSocket` from the previously bound socket provided.",16,{"inputs":[{"name":"udpsocket"},{"name":"handle"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",16,null],[11,"poll_read","","Test whether this socket is ready to be read or not.",16,null],[11,"poll_write","","Test whether this socket is writey to be written to or not.",16,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",16,null],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",16,null],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",16,null],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",16,null],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",16,null],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",16,null],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",16,null],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",16,null],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",16,null],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",16,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",16,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",16,null],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",16,null],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",16,null],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",16,null],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",16,null],[11,"fmt","","",16,null],[0,"reactor","tokio_core","The core reactor driving all I/O",null,null],[3,"PollEvented","tokio_core::reactor","A concrete implementation of a stream of readiness notifications for I/O\nobjects that originates from an event loop.",null,null],[3,"Timeout","","A future representing the notification that a timeout has occurred.",null,null],[3,"Core","","An event loop.",null,null],[3,"Remote","","Handle to an event loop, used to construct I/O objects, send messages, and\notherwise interact indirectly with the event loop itself.",null,null],[3,"Handle","","A non-sendable handle to an event loop, useful for manufacturing instances\nof `LoopData`.",null,null],[11,"new","","Creates a new readiness stream associated with the provided\n`loop_handle` and for the given `source`.",17,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll_read","","Tests to see if this source is ready to be read from or not.",17,null],[11,"poll_write","","Tests to see if this source is ready to be written to or not.",17,null],[11,"need_read","","Indicates to this source of events that the corresponding I/O object is\nno longer readable, but it needs to be.",17,null],[11,"need_write","","Indicates to this source of events that the corresponding I/O object is\nno longer writable, but it needs to be.",17,null],[11,"remote","","Returns a reference to the event loop handle that this readiness stream\nis associated with.",17,null],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness\nstream is wrapping.",17,null],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness\nstream is wrapping.",17,null],[11,"read","","",17,null],[11,"write","","",17,null],[11,"flush","","",17,null],[11,"poll_read","","",17,null],[11,"poll_write","","",17,null],[11,"drop","","",17,null],[11,"new","","Creates a new timeout which will fire at `dur` time into the future.",18,{"inputs":[{"name":"duration"},{"name":"handle"}],"output":{"name":"result"}}],[11,"new_at","","Creates a new timeout which will fire at the time specified by `at`.",18,{"inputs":[{"name":"instant"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll","","",18,null],[11,"drop","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"new","","Creates a new event loop, returning any error that happened during the\ncreation.",21,{"inputs":[],"output":{"name":"result"}}],[11,"handle","","Returns a handle to this event loop which cannot be sent across threads\nbut can be used as a proxy to the event loop itself.",21,null],[11,"remote","","Generates a remote handle to this event loop which can be used to spawn\ntasks from other threads into this event loop.",21,null],[11,"run","","Runs a future until completion, driving the event loop while we&#39;re\notherwise waiting for the future to complete.",21,null],[11,"spawn","","Spawns a new future into the event loop this handle is associated this.",19,null],[11,"remote","","Returns a reference to the underlying remote handle to the event loop.",20,null],[11,"spawn","","Spawns a new future on the event loop this pin is associated this.",20,null],[14,"try_nb","tokio_core","A convenience macro for working with `io::Result&lt;T&gt;` from the `Read` and\n`Write` traits.",null,null]],"paths":[[3,"Copy"],[3,"Flush"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"Window"],[3,"WriteAll"],[8,"Io"],[8,"FramedIo"],[3,"Sender"],[3,"Receiver"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"TcpStreamNew"],[3,"UdpSocket"],[3,"PollEvented"],[3,"Timeout"],[3,"Remote"],[3,"Handle"],[3,"Core"]]};
initSearch(searchIndex);
